// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using RevolvingCredit.Entity;
using System;

namespace RevolvingCredit.Entity.Migration
{
    [DbContext(typeof(RevolvingCreditContext))]
    [Migration("20171201080823_Create")]
    partial class Create
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("RevolvingCredit.Entity.Model.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("FullName");

                    b.Property<short>("SafeAccountNumber");

                    b.Property<string>("ShortName");

                    b.HasKey("Id");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("RevolvingCredit.Entity.Model.AccountAPR", b =>
                {
                    b.Property<Guid>("AccountId");

                    b.Property<int>("TypeId");

                    b.Property<DateTime>("UpdateTimestamp");

                    b.Property<double>("APR");

                    b.HasKey("AccountId", "TypeId", "UpdateTimestamp");

                    b.HasIndex("TypeId");

                    b.ToTable("AccountAPR");
                });

            modelBuilder.Entity("RevolvingCredit.Entity.Model.AccountIssuer", b =>
                {
                    b.Property<Guid>("AccountId");

                    b.Property<int>("IssuerId");

                    b.Property<DateTime>("UpdateTimestamp");

                    b.HasKey("AccountId", "IssuerId", "UpdateTimestamp");

                    b.HasIndex("IssuerId");

                    b.ToTable("AccountIssuer");
                });

            modelBuilder.Entity("RevolvingCredit.Entity.Model.AccountLabel", b =>
                {
                    b.Property<Guid>("AccountId");

                    b.Property<int>("LabelId");

                    b.Property<DateTime>("UpdateTimestamp");

                    b.HasKey("AccountId", "LabelId", "UpdateTimestamp");

                    b.HasIndex("LabelId");

                    b.ToTable("AccountLabel");
                });

            modelBuilder.Entity("RevolvingCredit.Entity.Model.AccountLine", b =>
                {
                    b.Property<Guid>("AccountId");

                    b.Property<int>("LineId");

                    b.Property<DateTime>("UpdateTimestamp");

                    b.Property<double>("Limit");

                    b.HasKey("AccountId", "LineId", "UpdateTimestamp");

                    b.HasIndex("LineId");

                    b.ToTable("AccountLine");
                });

            modelBuilder.Entity("RevolvingCredit.Entity.Model.AccountNote", b =>
                {
                    b.Property<Guid>("AccountId");

                    b.Property<DateTime>("UpdateTimestamp");

                    b.Property<string>("Contents");

                    b.HasKey("AccountId", "UpdateTimestamp");

                    b.ToTable("AccountNote");
                });

            modelBuilder.Entity("RevolvingCredit.Entity.Model.AccountPayment", b =>
                {
                    b.Property<Guid>("AccountId");

                    b.Property<DateTime>("Due");

                    b.Property<double>("Amount");

                    b.Property<int>("TypeId");

                    b.HasKey("AccountId", "Due");

                    b.HasIndex("TypeId");

                    b.ToTable("AccountPayment");
                });

            modelBuilder.Entity("RevolvingCredit.Entity.Model.AccountPromotion", b =>
                {
                    b.Property<Guid>("AccountId");

                    b.Property<int>("TypeId");

                    b.Property<DateTime>("Start");

                    b.Property<DateTime>("End");

                    b.Property<double>("APR");

                    b.HasKey("AccountId", "TypeId", "Start", "End");

                    b.HasIndex("TypeId");

                    b.ToTable("AccountPromotion");
                });

            modelBuilder.Entity("RevolvingCredit.Entity.Model.AccountStatement", b =>
                {
                    b.Property<Guid>("AccountId");

                    b.Property<DateTime>("End");

                    b.Property<double>("EndBalance");

                    b.Property<double>("Fee");

                    b.Property<double>("Interest");

                    b.Property<DateTime>("Start");

                    b.Property<double>("StartBalance");

                    b.HasKey("AccountId", "End");

                    b.ToTable("AccountStatement");
                });

            modelBuilder.Entity("RevolvingCredit.Entity.Model.APR", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("FullName");

                    b.Property<string>("ShortName");

                    b.HasKey("Id");

                    b.ToTable("APR");
                });

            modelBuilder.Entity("RevolvingCredit.Entity.Model.Issuer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("FullName");

                    b.Property<string>("ShortName");

                    b.HasKey("Id");

                    b.ToTable("Issuer");
                });

            modelBuilder.Entity("RevolvingCredit.Entity.Model.Label", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("FullName");

                    b.Property<string>("ShortName");

                    b.HasKey("Id");

                    b.ToTable("Label");
                });

            modelBuilder.Entity("RevolvingCredit.Entity.Model.Line", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("FullName");

                    b.Property<string>("ShortName");

                    b.HasKey("Id");

                    b.ToTable("Line");
                });

            modelBuilder.Entity("RevolvingCredit.Entity.Model.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("FullName");

                    b.Property<string>("ShortName");

                    b.HasKey("Id");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("RevolvingCredit.Entity.Model.AccountAPR", b =>
                {
                    b.HasOne("RevolvingCredit.Entity.Model.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RevolvingCredit.Entity.Model.APR", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RevolvingCredit.Entity.Model.AccountIssuer", b =>
                {
                    b.HasOne("RevolvingCredit.Entity.Model.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RevolvingCredit.Entity.Model.Issuer", "Issuer")
                        .WithMany()
                        .HasForeignKey("IssuerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RevolvingCredit.Entity.Model.AccountLabel", b =>
                {
                    b.HasOne("RevolvingCredit.Entity.Model.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RevolvingCredit.Entity.Model.Label", "Label")
                        .WithMany()
                        .HasForeignKey("LabelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RevolvingCredit.Entity.Model.AccountLine", b =>
                {
                    b.HasOne("RevolvingCredit.Entity.Model.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RevolvingCredit.Entity.Model.Line", "Line")
                        .WithMany()
                        .HasForeignKey("LineId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RevolvingCredit.Entity.Model.AccountNote", b =>
                {
                    b.HasOne("RevolvingCredit.Entity.Model.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RevolvingCredit.Entity.Model.AccountPayment", b =>
                {
                    b.HasOne("RevolvingCredit.Entity.Model.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RevolvingCredit.Entity.Model.Payment", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RevolvingCredit.Entity.Model.AccountPromotion", b =>
                {
                    b.HasOne("RevolvingCredit.Entity.Model.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RevolvingCredit.Entity.Model.APR", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RevolvingCredit.Entity.Model.AccountStatement", b =>
                {
                    b.HasOne("RevolvingCredit.Entity.Model.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
